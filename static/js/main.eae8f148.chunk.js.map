{"version":3,"sources":["components/App/images/Sq1.svg","components/App/images/Sq2.svg","components/App/images/Sq3.svg","components/EnterTheFlows/images/FlowBasic.png","components/ChooseYourTool/images/mindmeister.png","components/ProblemDeconstruction/images/Goals.png","components/Hypotheses/images/HypothesesFluid.png","components/Hypotheses/images/HypothesesStructured.png","components/BecomingACup/images/User Flow.png","components/BecomingACup/images/User Stories.png","components/FlowMap/images/Flow Listing.png","components/FlowMap/images/Flow Map.png","components/FlowMap/images/made-design-showroom.jpg","components/Prototype/images/Dev Flow.png","components/Prototype/images/Dev Flow Horz.png","components/App/styles.tsx","components/BeLikeWater/BeLikeWater.tsx","components/EmptyYourMind/EmptyYourMind.tsx","components/EnterTheFlows/EnterTheFlows.tsx","components/ChooseYourTool/ChooseYourTool.tsx","components/ProblemDeconstruction/ProblemDeconstruction.tsx","components/Hypotheses/Hypotheses.tsx","components/BecomingACup/BecomingACup.tsx","components/FlowMap/FlowMap.tsx","components/Prototype/Prototype.tsx","components/Thanks/Thanks.tsx","components/Menu/styles.tsx","components/Share/styles.tsx","components/Share/Share.tsx","components/Menu/Menu.tsx","components/App/globalStyle.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppColors","AppContainer","styled","div","AppHeader","menu","header","AppTitles","AppLogo","Page","section","Block","props","desktopOrder","BlockFull","imgMarginSettings","BlockLeft","BlockRight","BlockRightFirst","data","title","id","BeLikeWater","children","useAppContext","appWidth","addToTableOfContents","useState","mounted","setMounted","showVideo","setShowVideo","vidWidth","setVidWidth","vidHeight","setVidHeight","vidMarginTop","setVidMarginTop","useEffect","widthVal","style","margin","marginTop","videoId","opts","width","toString","height","EmptyYourMind","paddingTop","EnterTheFlows","src","ImgFlowBasic","alt","ChooseYourTool","href","ImgTool","ProblemDeconstruction","ImgGoals","Hypotheses","ImgStructured","ImgFluid","BecomingACup","ImgUserFlow","ImgUserStories","FlowMap","ImgFlowMap","ImgShowroom","ImgFlowListing","Prototype","ImgDevFlow","ImgDevFlowHorz","Thanks","MenuOptions","AnchorContainer","ShareContainer","Share","LinkedinShareButton","url","appUrl","appTitle","summary","appQuote","LinkedinIcon","size","round","FacebookShareButton","quote","FacebookIcon","TwitterShareButton","TwitterIcon","WhatsappShareButton","separator","WhatsappIcon","EmailShareButton","subject","body","EmailIcon","Menu","tableOfContentsItems","map","dataVal","key","menuTitle","GlobalStyleCss","AppContext","createContext","useContext","GlobalStyle","createGlobalStyle","App","containerDom","useRef","setAppWidth","appHeight","setAppHeight","setTableOfContentsItems","updateAppSize","useCallback","current","offsetWidth","offsetHeight","tableOfContentsItemsVal","push","domElement","addEventListener","window","removeEventListener","Provider","value","ref","SvgLogo1","color","SvgLogo2","SvgLogo3","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,yBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,ohICWpC,IAAMC,EACJ,UADIA,EAEF,UAFEA,EAGF,UAHEA,EAIF,UAOEC,EAAeC,IAAOC,IAAV,KA0DZC,GAhDUF,IAAOG,KAAV,KAUUH,IAAOC,IAAV,KAkBID,IAAOC,IAAV,KAoBHD,IAAOI,OAAV,MAgBTC,EAAYL,IAAOC,IAAV,KAqBTK,EAAUN,IAAOC,IAAV,KA6BPM,EAAOP,IAAOQ,QAAV,KAmBJC,EAAQT,IAAOC,IAAV,KAYJ,SAAAS,GAAK,OAAIA,EAAMC,cAAgB,aAUhCC,EAAYZ,YAAOS,EAAPT,CAAH,KAsDhBa,EAAiB,+EAQVC,EAAYd,YAAOY,EAAPZ,CAAH,IAOhBa,GAIOE,EAAaf,YAAOY,EAAPZ,CAAH,IAOjBa,GAIOG,EAAkBhB,YAAOe,EAAPf,CAAH,KClQfiB,EAAsB,CAClCC,MAAQ,gBACRC,GAAK,iBAoFSC,EAjFmC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAI/DC,KADHC,EAHkE,EAGlEA,SAAUC,EAHwD,EAGxDA,qBAHwD,EAMrCC,oBAAS,GAN4B,mBAM5DC,EAN4D,KAMnDC,EANmD,OAQjCF,oBAAS,GARwB,mBAQ5DG,EAR4D,KAQjDC,EARiD,OASnCJ,qBATmC,mBAS5DK,EAT4D,KASlDC,EATkD,OAUjCN,qBAViC,mBAU5DO,EAV4D,KAUjDC,EAViD,OAW3BR,qBAX2B,mBAW5DS,EAX4D,KAW9CC,EAX8C,KAgDnE,OAlCAC,qBAAU,YACFV,GAAWF,IACfA,EAAqBP,GACpBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGpCS,qBAAU,WACT,GAAIb,EAAU,CACb,IACIc,EAAoB,EAEpBd,EAAW,KAIJA,EAAW,MAHrBc,EAAWd,EACXY,EAAgB,UAOhBE,EAAsB,IAAXd,EAAkB,EAC7BY,EAAgB,SAGjBJ,EAAYM,GACZJ,EAAaI,GAjBU,EAAE,IAmBpBT,GAAWC,GAAa,MAE5B,CAACN,EAAUQ,EAAaE,EAAcE,EAAiBP,EAAWC,IAIpE,kBAACtB,EAAD,CAAMY,GAAIF,EAAKE,IACZ,kBAACL,EAAD,KACC,4BAAKG,EAAKC,OACT,8DAAmC,6BAAnC,kWAGA,kDAAuB,8CAGvBU,GACA,kBAACnB,EAAD,KACC,yBAAK6B,MAAO,CACXC,OAAS,OACTC,UAAYN,IAEZ,kBAAC,IAAD,CACCf,GAAG,MACHsB,QAAQ,cACTC,KAAM,CACNC,MAAOb,EAASc,WACfC,OAAQb,EAAUY,gBAOrBvB,IClFMJ,EAAsB,CACjCC,MAAQ,kBACRC,GAAK,mBAmCQ2B,EAhCuC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAGrDG,EACEF,KADFE,qBAHoE,EAMxCC,oBAAS,GAN+B,mBAM/DC,EAN+D,KAMtDC,EANsD,KAetE,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,GACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,EAAKE,IACb,kBAACL,EAAD,KACE,4BAAKG,EAAKC,QAGZ,kBAACH,EAAD,CAAYuB,MAAO,CAAES,WAAa,SAChC,2BAAG,iEAAH,8PACA,uVACA,yPAGD1B,I,iBC3BMJ,EAAsB,CACjCC,MAAQ,kBACRC,GAAK,mBAmEQ6B,EAhEuC,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAGrDG,EACEF,KADFE,qBAHoE,EAMxCC,oBAAS,GAN+B,mBAM/DC,EAN+D,KAMtDC,EANsD,KAetE,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,GACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,EAAKE,IACb,kBAACP,EAAD,KACE,4BAAKK,EAAKC,QAEZ,kBAACJ,EAAD,KACE,2BAAG,+EACH,gRACA,qNAAqL,0EAGvL,kBAACC,EAAD,KACE,4HACA,4BACE,+DACA,+DACA,uDACA,0DAIJ,kBAACD,EAAD,KACE,sDACA,2BAAG,yDAAH,oJACA,2BAAG,uEAAH,sHAAqK,6BAArK,mEAEA,yBAAKmC,IAAKC,IAAcC,IAAI,gCAG7B,kBAACpC,EAAD,KACC,iDACA,2BAAG,mCAAH,iHAA4H,6BAA5H,0MACoM,6BADpM,oDAIA,2BAAG,mCAAH,kDAA6D,6BAA7D,wGAGA,2BAAG,uCAAH,iDAAgE,6BAAhE,4KAGA,gNAGDM,I,iBCnEMJ,EAAsB,CACjCC,MAAQ,0BACRC,GAAK,oBAyCQiC,EAtCyC,SAAC,GAAkB,IAAhB/B,EAAe,EAAfA,SAGvDG,EACEF,KADFE,qBAHsE,EAM1CC,oBAAS,GANiC,mBAMjEC,EANiE,KAMxDC,EANwD,KAexE,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,GACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,EAAKE,IAEb,kBAACL,EAAD,KACE,4BAAKG,EAAKC,OACV,kMACA,4BACE,+GACA,oHACA,iJAEF,iEAAsC,2BAAG,uBAAGmC,KAAK,gCAAR,gBAAzC,8CAGF,kBAACrC,EAAD,KACE,yBAAKiC,IAAKK,IAASH,IAAI,2CAGxB9B,I,iBCtCMJ,EAAsB,CACjCC,MAAQ,8BACRC,GAAK,yBAgFQoC,GA7EuD,SAAC,GAAkB,IAAhBlC,EAAe,EAAfA,SAGrEG,EACEF,KADFE,qBAHoF,EAMxDC,oBAAS,GAN+C,mBAM/EC,EAN+E,KAMtEC,EANsE,KAetF,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,GACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,EAAKE,IACb,kBAACP,EAAD,CAAWD,aAAa,KACtB,4BAAKM,EAAKC,QAGZ,kBAACJ,EAAD,CAAWH,aAAa,KACtB,2BAAG,oDAAuB,6BAA1B,wDAEA,gMACA,iEAAsC,6BAAtC,0DAIF,kBAACI,EAAD,CAAYJ,aAAa,KACvB,2BAAG,gDAAwB,6BAA3B,4GAEA,4BACE,2DACA,2CACA,8CACA,gDAEF,sFAGD,kBAACC,EAAD,CAAWD,aAAa,KACvB,8CAGF,kBAACG,EAAD,CAAWH,aAAa,KACtB,kTACA,2BAAG,wDAAH,+TAGF,kBAACI,EAAD,CAAYJ,aAAa,KACvB,kCAAO,8CAAP,8IACA,iRACA,2JAGF,kBAACI,EAAD,CAAYJ,aAAa,KACvB,yBAAKsC,IAAKO,IAAUL,IAAI,+CAG1B,kBAACrC,EAAD,CAAWH,aAAa,KACtB,kDACA,iFAAsD,6BAAtD,qMAEA,2PACA,qLAA0J,6BAA1J,mEAEA,2BAAG,0CAAH,+FACA,2BAAG,8CAAH,6FACA,2BAAG,8CAAH,qDAGDU,I,wCCzEMJ,GAAsB,CACjCC,MAAQ,aACRC,GAAK,cAiEQsC,GA9DiC,SAAC,GAAkB,IAAhBpC,EAAe,EAAfA,SAG/CG,EACEF,KADFE,qBAH8D,EAMlCC,oBAAS,GANyB,mBAMzDC,EANyD,KAMhDC,EANgD,KAehE,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,IACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,GAAKE,IACb,kBAACP,EAAD,KACE,4BAAKK,GAAKC,QAEZ,kBAACJ,EAAD,KACE,wPACA,qVACA,0HAGF,kBAACC,EAAD,KACE,2BAAG,qEAAH,oHACA,2BAAG,yEAAH,yGACA,sKAGD,kBAACD,EAAD,KACC,yBAAKmC,IAAKS,KAAeP,IAAI,wCAC7B,qDACA,sIACA,2BAAG,mCAAH,yDAAoE,6BAApE,mJAEA,2BAAG,mCAAH,iHAA4H,6BAA5H,8EAEA,2BAAG,sCAAH,qEAAmF,6BAAnF,4EAEA,2BAAG,yCAAH,iLAAkM,6BAAlM,mPAIF,kBAACpC,EAAD,KACE,yBAAKkC,IAAKU,KAAUR,IAAI,mCACxB,qCACA,meACA,2HACA,0GAA+E,6BAA/E,yJAEA,2LAA2J,6BAA3J,yCAID9B,I,wCC9DMJ,GAAsB,CACjCC,MAAQ,gCACRC,GAAK,kBAyEQyC,GAtEqC,SAAC,GAAkB,IAAhBvC,EAAe,EAAfA,SAGnDG,EACEF,KADFE,qBAHkE,EAMtCC,oBAAS,GAN6B,mBAM7DC,EAN6D,KAMpDC,EANoD,KAepE,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,IACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,GAAKE,IACb,kBAACP,EAAD,CAAWD,aAAa,KACtB,4BAAKM,GAAKC,QAEZ,kBAACJ,EAAD,CAAWH,aAAa,KACtB,8UACA,sIACA,2BAAG,0CAAH,uRAGF,kBAACI,EAAD,CAAYJ,aAAa,KACvB,2BAAG,uCAAH,mNAAkO,6BAAlO,yKAEA,2BAAG,8CAAH,mTAGF,kBAACC,EAAD,CAAWD,aAAa,KACtB,yBAAKsC,IAAKY,KAAaV,IAAI,eAG7B,kBAACvC,EAAD,CAAWD,aAAa,KACtB,0CAGF,kBAACG,EAAD,CAAWH,aAAa,KACtB,iNACA,gOACA,2BAAG,2CAAH,wLACA,2BAAG,4CAAH,+LAGF,kBAACI,EAAD,CAAYJ,aAAa,KACvB,2BAAG,2CAAH,6KACA,2BAAG,yCAAH,8NACA,2BAAG,4CAAH,6LAGF,kBAACI,EAAD,CAAYJ,aAAa,KACvB,yBAAKsC,IAAKa,KAAgBX,IAAI,kBAGhC,kBAACrC,EAAD,CAAWH,aAAa,KACtB,4CACA,+MACA,2BAAG,yCAAH,iJACA,2BAAG,uCAAH,4IACA,2BAAG,oCAAH,mKAGDU,I,4DCrEMJ,GAAsB,CACjCC,MAAQ,WACRC,GAAK,YA0EQ4C,GAvE2B,SAAC,GAAkB,IAAhB1C,EAAe,EAAfA,SAGzCG,EACEF,KADFE,qBAHwD,EAM5BC,oBAAS,GANmB,mBAMnDC,EANmD,KAM1CC,EAN0C,KAe1D,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,IACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,GAAKE,IACb,kBAACL,EAAD,KACE,4BAAKG,GAAKC,QAGZ,kBAACH,EAAD,KACE,2BAAG,yFAAH,kIACA,oTAGF,kBAACD,EAAD,KACE,uCACA,8nBAGF,kBAACC,EAAD,KACE,uCACA,yPACA,+UAGF,kBAACD,EAAD,KACE,yBAAKmC,IAAKe,KAAYb,IAAI,6BAC1B,yCACA,2BAAG,sEAAH,4VACA,qNAGF,kBAACpC,EAAD,KACE,yBAAKkC,IAAKgB,KAAad,IAAI,sEAC3B,wCACA,gkBAGF,kBAACvC,EAAD,KACE,yBAAKqC,IAAKiB,KAAgBf,IAAI,2BAC9B,8CAGF,kBAACrC,EAAD,KACE,oGAAyE,6BAAzE,mOAEA,kGAGF,kBAACC,EAAD,KACE,uJACA,2BAAG,uDAAH,2HAGDM,I,wCC1EMJ,GAAsB,CACjCC,MAAQ,YACRC,GAAK,aAqDQgD,GAlD+B,SAAC,GAAkB,IAAhB9C,EAAe,EAAfA,SAAe,EAI1DC,KADFC,EAH4D,EAG5DA,SAAUC,EAHkD,EAGlDA,qBAHkD,EAMhCC,oBAAS,GANuB,mBAMvDC,EANuD,KAM9CC,EAN8C,KAe9D,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,IACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,GAAKE,IAEb,kBAACP,EAAD,KACIW,GAAYA,EAAW,IACvB,yBAAK0B,IAAKmB,KAAYjB,IAAI,qCAE1B,yBAAKF,IAAKoB,KAAgBlB,IAAI,sCAIlC,kBAACrC,EAAD,KACE,4BAAKG,GAAKC,OACV,qSACA,yZACA,2CAAgB,2BAAG,uBAAGmC,KAAK,4EAAR,yCAAnB,yUACA,6cAGF,kBAACtC,EAAD,KACIQ,GAAYA,EAAW,KACvB,oCAEA,oCAEF,6FACA,0YACA,qPAGDF,ICtDMJ,GAAsB,CACjCC,MAAQ,wBACRC,GAAK,UAkCQmD,GA/ByB,SAAC,GAAkB,IAAhBjD,EAAe,EAAfA,SAGvCG,EACEF,KADFE,qBAHsD,EAM1BC,oBAAS,GANiB,mBAMjDC,EANiD,KAMxCC,EANwC,KAexD,OAPAS,qBAAU,YACHV,GAAWF,IACdA,EAAqBP,IACrBU,GAAW,MAEZ,CAACD,EAASF,EAAsBG,IAGjC,kBAACpB,EAAD,CAAMY,GAAIF,GAAKE,IACb,kBAACL,EAAD,KACE,4BAAKG,GAAKC,QAGZ,kBAACH,EAAD,KACE,oCAAS,+BAAI,uBAAGsC,KAAK,yBAAR,aAAb,2CACA,+UAGDhC,I,k2BCtCsBrB,IAAOG,KAAV,MAHnB,IAaMoE,GAAcvE,IAAOC,IAAV,MAUXuE,GAAkBxE,IAAOC,IAAV,M,kWCvBrB,IAEMwE,GAAiBzE,IAAOC,IAAV,MC6EZyE,GAlDuB,SAAC,GAAiB,EAAfrD,SAEvC,OACE,kBAAC,GAAD,KAEE,kBAACsD,GAAA,EAAD,CACEC,IAAKC,GACL3D,MAAO4D,GACPC,QAASC,IAET,kBAACC,GAAA,EAAD,CAAcC,KDvCgB,GCuCKC,OAAK,KAG1C,kBAACC,GAAA,EAAD,CACER,IAAKC,GACLQ,MAAOL,IAEP,kBAACM,GAAA,EAAD,CAAcJ,KD9CgB,GC8CKC,OAAK,KAG1C,kBAACI,GAAA,EAAD,CACEX,IAAKC,GACL3D,MAAO8D,IAEP,kBAACQ,GAAA,EAAD,CAAaN,KDrDiB,GCqDIC,OAAK,KAGzC,kBAACM,GAAA,EAAD,CACEb,IAAKC,GACL3D,MAAO8D,GACPU,UAAU,OAEV,kBAACC,GAAA,EAAD,CAAcT,KD7DgB,GC6DKC,OAAK,KAG1C,kBAACS,GAAA,EAAD,CACEhB,IAAKC,GACLgB,QAASf,GACTgB,KAAMd,GACNU,UAAS,QAIT,kBAACK,GAAA,EAAD,CAAWb,KDxEmB,GCwEEC,OAAK,O,oBCrC9Ba,GAnBqB,SAAC,GAAiB,EAAf3E,SAAgB,IAAD,EAIhDC,KADQ2E,GAHwC,EAGlD1E,SAHkD,EAGxC0E,sBAGZ,OACE,kBAAC1B,GAAD,KACE,kBAAC,GAAD,MAEA,kBAAC,GAAD,KACG0B,GAAwBA,EAAqBC,KAAI,SAACC,GAAD,OAChD,kBAAC,KAAD,CAAYC,IAAKD,EAAQhF,GAAIkC,KAAI,WAAM8C,EAAQhF,KAAOgF,EAAQE,WAAaF,EAAQjF,aC5BhFoF,GAAuB,2FAMvBxG,EANuB,ozBAuDvBA,EAvDuB,uIAiEvBA,EAjEuB,uG,4IC6CpC,IAAMyG,GAAaC,wBAA2B,IAEjClF,GAAgB,WAC3B,OAAOmF,qBAAWF,KAIP1B,GAAkB,iCAClBC,GAAoB,sBACpBE,GAAoB,qFAG3B0B,GAAcC,YAAH,KACbL,IAgIWM,GA5HmB,WAAO,IAAD,EAERnF,oBAAS,GAFD,mBAE/BC,EAF+B,KAEtBC,EAFsB,KAIhCkF,EAAeC,iBAAuB,MAJN,EAMNrF,mBAAiB,GANX,mBAM/BF,EAN+B,KAMrBwF,EANqB,OAOJtF,mBAAiB,GAPb,mBAO/BuF,EAP+B,KAOpBC,EAPoB,OAQkBxF,mBAAyB,IAR3C,mBAQ/BwE,EAR+B,KAQTiB,EARS,KAUhCC,EAAgBC,uBAAY,WAC5BP,GAAgBA,EAAaQ,UAC/BN,EAAYF,EAAaQ,QAAQC,aACjCL,EAAaJ,EAAaQ,QAAQE,iBAEnC,CAACR,EAAaE,IAGXzF,EAAuB4F,uBAAY,SAACjB,GACxC,IAAMqB,EAA0BvB,EAChCuB,EAAwBC,KAAKtB,GAC7Be,EAAwBM,KACvB,CAACvB,EAAsBiB,IA2B1B,OAxBA9E,qBAAU,WACHV,IACHyF,IACAxF,GAAW,MAEZ,CAACD,EAASyF,IAGb/E,qBAAU,WACR,GAAIyE,GAAgBA,EAAaQ,QAAS,CACxC,IAAMK,EAAab,EAAaQ,QAKhC,OAHAK,EAAWC,iBAAiB,SAAUR,GACtCS,OAAOD,iBAAiB,SAAUR,GAE3B,WACDO,IACFA,EAAWG,oBAAoB,SAAUV,GACzCS,OAAOC,oBAAoB,SAAUV,SAQ3C,kBAACZ,GAAWuB,SAAZ,CACEC,MAAO,CACLxG,WAAUyF,YACVf,uBAAsBzE,yBAIxB,kBAAC,GAAD,MAEA,kBAACzB,EAAD,CACEiI,IAAKnB,GAGHtF,GAAYA,EAAW,IACvB,kBAACrB,EAAD,KACE,kBAACI,EAAD,KACE,6BACE,yBAAK2C,IAAKgF,KAAU9E,IAAI,gBACxB,wBAAIb,MAAO,CAAE4F,MAAQpI,IAArB,WAEF,6BACE,yBAAKmD,IAAKkF,KAAUhF,IAAI,eACxB,wBAAIb,MAAO,CAAE4F,MAAQpI,IAArB,UAEF,6BACE,yBAAKmD,IAAKmF,KAAUjF,IAAI,gBACxB,wBAAIb,MAAO,CAAE4F,MAAQpI,IAArB,aAKN,kBAACI,EAAD,KACE,kBAACI,EAAD,KACE,yBAAK2C,IAAKgF,KAAU9E,IAAI,gBACxB,yBAAKF,IAAKkF,KAAUhF,IAAI,eACxB,yBAAKF,IAAKmF,KAAUjF,IAAI,iBAE1B,kBAAC9C,EAAD,KACE,wBAAIiC,MAAO,CAAE4F,MAAQpI,IAArB,UACA,wBAAIwC,MAAO,CAAE4F,MAAQpI,IAArB,SACA,wBAAIwC,MAAO,CAAE4F,MAAQpI,IAArB,YAKN,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,GAAD,MAEA,kBAAC,GAAD,MAEA,kBAAC,GAAD,MAEA,kBAAC,GAAD,MAEA,kBAAC,GAAD,MAEA,kBAAC,GAAD,OAIF,kBAAC4G,GAAD,QC1Kc2B,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eae8f148.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sq1.6c383c86.svg\";","module.exports = __webpack_public_path__ + \"static/media/Sq2.8a72a120.svg\";","module.exports = __webpack_public_path__ + \"static/media/Sq3.50085bca.svg\";","module.exports = __webpack_public_path__ + \"static/media/FlowBasic.72f388da.png\";","module.exports = __webpack_public_path__ + \"static/media/mindmeister.dc4b7f33.png\";","module.exports = __webpack_public_path__ + \"static/media/Goals.b3ff1afd.png\";","module.exports = __webpack_public_path__ + \"static/media/HypothesesFluid.087257e0.png\";","module.exports = __webpack_public_path__ + \"static/media/HypothesesStructured.4fa4639a.png\";","module.exports = __webpack_public_path__ + \"static/media/User Flow.878c654d.png\";","module.exports = __webpack_public_path__ + \"static/media/User Stories.c529f6f5.png\";","module.exports = __webpack_public_path__ + \"static/media/Flow Listing.27bda4d4.png\";","module.exports = __webpack_public_path__ + \"static/media/Flow Map.9b70d11a.png\";","module.exports = __webpack_public_path__ + \"static/media/made-design-showroom.b1e61248.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Dev Flow.9e938632.png\";","module.exports = __webpack_public_path__ + \"static/media/Dev Flow Horz.804306f3.png\";","import styled from 'styled-components';\n\n\nexport interface IAppColors {\n  text : string,\n  brand1 : string,\n  brand2 : string,\n  brand3 : string\n}\n\n\nexport const AppColors : IAppColors = {\n  text : \"#22231E\",\n  brand1 : \"#2CB4F7\",\n  brand2 : \"#2E80FD\",\n  brand3 : \"#5F5CF2\"\n}\n\n\nexport const ShareIconSize : number = 40;\n\n\nexport const AppContainer = styled.div`\n  display : flex;\n  flex-direction : column;\n  margin : auto;\n\n  width : 100%;\n  max-width : 1400px;\n`;\n\n\nexport const AppMenu = styled.menu`\n  margin : 0;\n  padding : 0;\n  position : fixed;\n  width : 100%;\n  height : 100vh;\n  background-color : #FFFFFF;\n`;\n\n\nexport const ShareContainer = styled.div`\n  display : flex;\n  flex-direction : row;\n  justify-content : center;\n\n  margin : 0;\n  padding : 0;\n\n  * {\n    padding : 8px;\n  }\n\n  @media (min-width: 768px) {\n    \n  }\n`;\n\n\nexport const AnchorContainer = styled.div`\n  display : flex;\n  flex-direction : column;\n  justify-content : space-around;\n\n  height : 80%;\n\n  margin : 0;\n  padding : 0;\n\n  * {\n    padding : 8px;\n  }\n\n  @media (min-width: 768px) {\n    \n  }\n`;\n\n\nexport const AppHeader = styled.header`\n  display : flex;\n  flex-direction : column;\n  justify-content : center;\n  align-items : center;\n  width : 100%;\n  padding-top : 80px;\n  padding-bottom : 80px;\n\n  @media (min-width: 768px) {\n    padding-top : 120px;\n    padding-bottom : 120px;\n  }\n`;\n\n\nexport const AppTitles = styled.div`\n  display : flex;\n  flex-direction : row;\n  flex-wrap : wrap;\n\n  h1 {\n    margin : 0;\n    padding : 0;\n    width : auto;\n    margin-left : 20px;\n  }\n\n  @media (min-width: 768px) {\n\n    h1 {\n      padding-top : 30px;\n    }\n  }\n`;\n\n\nexport const AppLogo = styled.div`\n  display : flex;\n  flex-direction : column;\n\n  div {\n    display : flex;\n    flex-direction : row;\n    justify-content : flex-start;\n    align-items : center;\n  }\n\n  img {\n    padding : 5px;\n  }\n\n  h1 {\n    margin : 0;\n    padding : 0;\n    width : auto;\n    padding-left : 9%;\n    padding-right : 4%;\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\n\nexport const Page = styled.section`\n  display : flex;\n  flex-direction : column;\n  justify-content : left;\n  flex-wrap : wrap;\n\n  width : 100%;\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\ninterface IBlockProps {\n  desktopOrder ?: string\n}\n\n\n\nexport const Block = styled.div<IBlockProps>`\n  display : flex;\n  flex-direction : column;\n  \n  width : 100%;\n  margin-bottom : 0;\n\n  img {\n    width : 100%;\n  }\n\n  @media (min-width : 1060px) {\n    order : ${props => props.desktopOrder || \"initial\"};\n    width : 50%;\n\n    img {\n      width : 84%;\n    }\n  }\n`;\n\n\nexport const BlockFull = styled(Block)`\n\n  width : 100%;\n\n  p, li {\n    padding-bottom : 1.2em;\n    width : 84%;\n    margin-left : 10%;\n    margin-right : 6%;\n  }\n\n  img {\n    width : 100%;\n  }\n\n  h2 {\n    padding-bottom : 0.8em;\n    width : 84%;\n    margin-left : 10%;\n    margin-right : 6%;\n  }\n\n  h3 {\n    padding-bottom : 0.6em;\n    width : 84%;\n    margin-left : 10%;\n    margin-right : 6%;\n  }\n\n  @media (min-width : 850px) {\n    width : 86%;\n    margin-left : 12%;\n    margin-right : 12%;\n\n    img {\n      width : 132%;\n      margin-left : -16%;\n      margin-right : -16%;\n    }\n  }\n\n  @media (min-width : 1060px) {\n    width : 86%;\n    margin-left : 7%;\n    margin-right : 7%;\n\n    img {\n      width : 118%;\n      margin-left : -9%;\n      margin-right : 0;\n    }\n  }\n`;\n\nconst imgMarginSettings = `\n  img {\n    width : 110%;\n    margin : 0;\n    margin-left : -1%;\n  }\n`;\n\nexport const BlockLeft = styled(BlockFull)`\n\n  @media (min-width : 1060px) {\n    width : 39%;\n    margin-left : 7%;\n    margin-right : 4%;\n\n    ${imgMarginSettings}\n  }\n`;\n\nexport const BlockRight = styled(BlockFull)`\n\n  @media (min-width : 1060px) {\n    width : 39%;\n    margin-left : 4%;\n    margin-right : 7%;\n\n    ${imgMarginSettings}\n  }\n`;\n\nexport const BlockRightFirst = styled(BlockRight)`\n\n  @media (max-width: 991px) {\n    order : -1;\n  }\n`;","import React, {useState, useEffect} from 'react';\nimport YouTube from 'react-youtube';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, BlockLeft, Block\n} from '../App/styles';\n\ninterface IBeLikeWaterProps {\n\tchildren ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n\ttitle : \"Be like water\",\n\tid : \"be-like-water\"\n}\n\nconst BeLikeWater : React.FC<IBeLikeWaterProps> = ({ children }) => {\n\n\tconst {\n\t\tappWidth, addToTableOfContents\n\t} = useAppContext();\n\n\tconst [mounted, setMounted] = useState(false);\n\n\tconst [showVideo, setShowVideo] = useState(false);\n\tconst [vidWidth, setVidWidth] = useState();\n\tconst [vidHeight, setVidHeight] = useState();\n\tconst [vidMarginTop, setVidMarginTop] = useState();\n\n\n\tuseEffect(() => {\n    if (!mounted && addToTableOfContents) {\n    \taddToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n\n\tuseEffect(() => {\n\t\tif (appWidth) {\n\t\t\tconst ratio : number = 4/3;\n\t\t\tlet widthVal : number = 0;\n\n\t\t\tif (appWidth < 768) {\n\t\t\t\twidthVal = appWidth;\n\t\t\t\tsetVidMarginTop(\"30px\");\n\n\t\t\t} else if (appWidth < 1060) {\n\t\t\t\twidthVal = appWidth;\n\t\t\t\tsetVidMarginTop(\"30px\");\n\n\t\t\t} else {\n\t\t\t\twidthVal = appWidth * 0.84 / 2;\n\t\t\t\tsetVidMarginTop(\"10px\");\n\t\t\t}\n\n\t\t\tsetVidWidth(widthVal);\n\t\t\tsetVidHeight(widthVal / ratio);\n\n\t\t\tif (!showVideo) setShowVideo(true);\n\t\t}\n\t}, [appWidth, setVidWidth, setVidHeight, setVidMarginTop, showVideo, setShowVideo]);\n\n \n\treturn (\n\t\t<Page id={data.id}>\n    \t<BlockLeft>\n    \t\t<h2>{data.title}</h2>\n\t      <p>Bruce Lee was my childhood hero.<br/>\n\t        In the 80s, growing up in Portugal, you would see the great Asian masters continuously on the tv. The confidence and precision of his movements were impressive, while his interviews showed a confident man who lived life as he fought, by his code and philosophy. He has plenty of great quotes but this message stayed with me from those days until now.\n\t      </p>\n\t      <p>This is the base of <b>how I design.</b></p>\n\t     </BlockLeft>\n\n      {showVideo && (\n      \t<Block>\n\t      \t<div style={{ \n\t      \t\tmargin : \"auto\",\n\t      \t\tmarginTop : vidMarginTop\n\t      \t}}>\n\t\t      \t<YouTube\n\t\t      \t\tid=\"vid\"\n\t\t      \t\tvideoId=\"cJMwBwFj5nQ\" \n\t\t    \t\t\topts={{\n\t\t  \t\t\t\t\twidth: vidWidth.toString(),\n\t\t    \t\t\t\theight: vidHeight.toString()\n\t\t  \t\t\t\t}} \n\t\t    \t\t/>\n\t    \t\t</div>\n\t    \t</Block>\n      )}\n\n      {children}\n    </Page>\n\t);\n}\n\nexport default BeLikeWater;","import React, {useState, useEffect} from 'react';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, BlockLeft, BlockRight\n} from '../App/styles';\n\ninterface IEmptyYourMindProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Empty your mind\",\n  id : \"empty-your-mind\"\n}\n\nconst EmptyYourMind : React.FC<IEmptyYourMindProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockLeft>\n        <h2>{data.title}</h2>\n      </BlockLeft>\n\n      <BlockRight style={{ paddingTop : \"10px\"}}>\n        <p><b>Remove yourself from the equation.</b> Erase your problems, what you like or dislike, what drives you, your passion, you don’t exist. You can’t. Every biased decision takes you a step back. All decisions should be made to help the user achieve their goal, with business in mind.</p>\n        <p>When you release your project to the world, it is then that you find the truth to what you have made. Then you have projections that are met and real numbers to study. Improvements and optimisations lead to more user research and that’s when you start to anticipate your users moves and what creates impact.</p>\n        <p>This happens because you need to be the user, as actors need to be their characters. Use their apps, follow their trends, speak with them, show them your progression, understand their worries and be surprised by them.</p>\n       </BlockRight>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default EmptyYourMind;","import React, {useState, useEffect} from 'react';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, \n  BlockLeft, \n  BlockRight,\n  BlockFull\n} from '../App/styles';\n\nimport ImgFlowBasic from './images/FlowBasic.png';\n\ninterface IEnterTheFlowsProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Enter the Flows\",\n  id : \"enter-the-flows\"\n}\n\nconst EnterTheFlows : React.FC<IEnterTheFlowsProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockFull>\n        <h2>{data.title}</h2>\n      </BlockFull>\n      <BlockLeft>\n        <p><b>Creating a flow can help you take any decision.</b></p>\n        <p>Products, websites, apps or games are built around a bundle of user decisions and business decisions. Writing them out, looking at them with different perspectives will give us a clear view of the actual scenario and which direction to take.</p>\n        <p>It’s important to write things down. Until an idea is written down it could be anything, it transforms and mutates with other people input and it will be forever amazing because <i>what can be better than your imagination?</i></p>\n      </BlockLeft>\n\n      <BlockRight>\n        <p>It is when you write the ideas down and define them, that the idea reveals its true ugliness:</p>\n        <ul>\n          <li>connections we didn’t make</li>\n          <li>things we forgot to account for</li> \n          <li>doesn’t make sense</li>\n          <li>data that we are missing</li>\n        </ul>\n       </BlockRight>\n\n      <BlockLeft>\n        <h3>Be formless, shapeless</h3>\n        <p><b>Remove the creation noise.</b> Abstract from any visual cue, anything that distracts you from the problem. We want to get a clear view of the problem and all its connections.</p>\n        <p><b>Like water filling the cracks of a rock,</b> to read a flow start from the left furthest node and move to the top next node. Follow the full flow of each node.<br/>\n          Then, move down on the previous interception node and continue.</p>\n        <img src={ImgFlowBasic} alt=\"Screenshot of a basic flow\"/>\n      </BlockLeft>\n\n       <BlockRight>\n        <h3>Anatomy of a flow</h3>\n        <p><b>Flow</b> is a hierarchy graph that shows nodes from the left to the right and in order by priority from top to bottom.<br/> \n          We use it to write down what we know, our predictions and decisions. We write our questions and if we don’t know the answers, it will show us what data is missing or that needs to be researched.<br/> \n          Each project will have different types of flows.</p>\n\n        <p><b>Node</b> is an individual element of content in a flow.<br/>\n          Moving these nodes around and changing their priority, allows us to experiment quickly and formless.</p>\n\n        <p><b>Priority</b> is always what is more important to the user.<br/>\n          A buy button is only important after the user has decided to buy, hence some information like name, size, colour, becomes more important in the first few user sessions.</p>\n\n        <p>When there is no priority, the nodes are equally matched and no order is important, just leave them in the order you like, for instance, all user stories are equally important.</p>\n      </BlockRight>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default EnterTheFlows;","import React, {useState, useEffect} from 'react';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, BlockLeft, BlockRightFirst\n} from '../App/styles';\n\nimport ImgTool from './images/mindmeister.png';\n\ninterface IChooseYourToolProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Choose your tool wisely\",\n  id : \"choose-your-tool\"\n}\n\nconst ChooseYourTool : React.FC<IChooseYourToolProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n\n      <BlockLeft>\n        <h3>{data.title}</h3>\n        <p>I have tried many different applications to create the flows, however, I didn’t find any tool that are perfect for what we want to do… My main goals are:</p>\n        <ul>\n          <li>Needs to display a hierarchy graph starting from the left and be easy to share.</li>\n          <li>We don’t want to worry with alignment and style, content is the main focus here</li>\n          <li>Needs to be fast to move things around, we want to drag nodes, delete them, create new ones, without much hassle</li>\n        </ul>\n        <p>My favourite tool at the moment is <b><a href=\"https://www.mindmeister.com/\">mindmeister</a></b>. Just align right and you're good to go.</p>\n      </BlockLeft>\n\n      <BlockRightFirst>\n        <img src={ImgTool} alt=\"Screenshot of the Mindmeister website\"/>\n      </BlockRightFirst>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default ChooseYourTool;","import React, {useState, useEffect} from 'react';\n\nimport { IChapterData } from '../../interfaces/Chapter';\nimport { useAppContext } from '../App/App';\nimport {\n  Page, BlockLeft, BlockRight, BlockFull\n} from '../App/styles';\n\nimport ImgGoals from './images/Goals.png';\n\ninterface IProblemDeconstructionProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Deconstruction of a problem\",\n  id : \"problemDeconstruction\"\n}\n\nconst ProblemDeconstruction : React.FC<IProblemDeconstructionProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockFull desktopOrder=\"0\">\n        <h2>{data.title}</h2>\n      </BlockFull>\n\n      <BlockLeft desktopOrder=\"1\">\n        <p><b>Where’s the cup?</b><br/>\n          We are analysing a problem, that problem is our cup.</p>\n        <p>A problem is made of several flows, all these flows have different goals, that means we are solving different parts of the problem. These are cups as well… </p>\n        <p>Do you know what the problem needs?<br/>\n          Honestly, depends on the amount of research you have.</p>\n      </BlockLeft>\n\n      <BlockRight desktopOrder=\"2\">\n        <p><b>What type of cup?</b><br/>\n          Our type of cup is what we’re designing.  The solution to the problem relies on what we want to do:</p>\n        <ul>\n          <li>a product or a feature flow</li>\n          <li>an app flow</li>\n          <li>a website flow</li>\n          <li>other solutions</li>\n        </ul>\n        <p>Or if you don’t have a solution, a research flow.</p>\n       </BlockRight>\n\n       <BlockFull desktopOrder=\"3\">\n        <h3>Collaboration</h3>\n      </BlockFull>\n\n      <BlockLeft desktopOrder=\"4\">\n        <p>By experience, it is much faster to create all these flows with every person involved in this direct problem. We can easily define a flow together between 1 and 2 hours. In the end, everyone agrees with what is written, we know what the next step is and who needs to do what.</p>\n        <p><b>Kick-off project meeting,</b> it is the perfect time to do the first flows. Involving different areas of business is very helpful, as we all have different life experiences, we see different things, we have different likes and dislikes. It’s very refreshing thinking of the problem altogether and sharing the flows between all in the end.</p>\n      </BlockLeft>\n\n      <BlockRight desktopOrder=\"5\">\n        <p>The <b>Product Manager</b> of the project is crucial, as during the project we keep meeting and defining flows to better understand a problem or to take a decision.</p>\n        <p>If any department is responsible for the brief they should come, at least, to the kick-off and periodic catchups. The developer and the artist are also important, contributing with great inputs and giving an idea of feasibility or complexity.</p>\n        <p>When discussing something specific, no need to involve everyone as we can do a 1v1 and notify the others about the changes.</p>\n      </BlockRight>\n\n      <BlockRight desktopOrder=\"7\">\n        <img src={ImgGoals} alt=\"Screenshot of a flow focused on the goals\"/>\n      </BlockRight>\n\n      <BlockLeft desktopOrder=\"6\">\n        <h3>Goal-driven design</h3>\n        <p>Do we know what the goals are? Number one question!<br/>\n          Every decision we make should be aligned with our goals, so we need to have them present and defined since the beginning. But be fluid if you need to pivot and change them, go for it and adapt.</p>\n        <p>My first step is to define the goals of the project. We are writing what we already know of this project until this moment. No need to worry if you don’t know the answer yet, just leave it blank and come back to it.</p>\n        <p>If instead of an answer you have a question, write it and continue, the answer might be in the flow, otherwise, we know where we need to start looking.<br/>\n          Usually, I use these goals, but add or remove for your purpose:</p>\n        <p><b>User goals,</b> why are they using your solution? What is the problem you are solving? Mostly assumptions.</p>\n        <p><b>Business goals,</b> what are the predictions and expectations of the business? Having some clear KPIs helps.</p>\n        <p><b>Document goals,</b> what do you expect to solve with this document?</p>\n      </BlockLeft>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default ProblemDeconstruction;","import React, {useState, useEffect} from 'react';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, \n  BlockLeft, \n  BlockRight, \n  BlockFull\n} from '../App/styles';\n\nimport ImgFluid from './images/HypothesesFluid.png';\nimport ImgStructured from './images/HypothesesStructured.png';\n\ninterface IHypothesesProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Hypotheses\",\n  id : \"hypotheses\"\n}\n\nconst Hypotheses : React.FC<IHypothesesProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockFull>\n        <h2>{data.title}</h2>\n      </BlockFull>\n      <BlockLeft>\n        <p>These are the assumptions that express what we believe in, they are the users expectations of the solution. They are written as an affirmation to validate a single problem and they evaluate to be either true or false.</p>\n        <p>If our goals are defined, we then work backwards to create the hypotheses that will validate our goals. If our hypotheses represent our problem, probably if we validate our hypotheses, we also validate our problem. It also leaves us with a very good indication that what we are building will solve the problem.</p>\n        <p>Otherwise, work backwards from the idea and keep asking, how  does the user do it and why?</p>\n      </BlockLeft>\n\n      <BlockRight>\n        <p><b>Creating is like shooting in the dark.</b> You have no clue to where you are aiming, you might be successful but the smaller the target, the harder it is.</p>\n        <p><b>With user research, you have a flashlight.</b> Still hard to be successful but with more research, the light is stronger and the target is clearer.</p>\n        <p>The user is directly involved in the product and it is the main driver for creating a product that meets your users’ expectation.</p>\n       </BlockRight>\n\n       <BlockLeft>\n        <img src={ImgStructured} alt=\"Screenshot of structured hypotheses\"/>\n        <h3>User + Goal + Because</h3>\n        <p>Usually, I use this structure for my hypothesis, as it is clear which agent is at play on which moment.</p>\n        <p><b>User</b> is the target that has the goal that we are defining.<br/>\n          In this case “Sofa buyers“, could be “50+ males” or “millennial couples“ or whatever it makes sense to that goal.</p>\n        <p><b>Goal</b> is the essence of your hypothesis, it is why the user is using your solution, broken down to a single action.<br/>\n          In this case “want the option to choose a different colour leg”.</p>\n        <p><b>Because</b> it is the reason why we believe the user has the goal we defined.<br/>\n          In this case, “they want it to match their antique furniture“.</p>\n        <p><b>Validation</b> is the method we are using to validate the hypothesis. How can we prove if the hypothesis is right or wrong (true or false). This is usually the node next to our hypothesis.<br/>\n          In this case, we can prove this hypothesis by asking a few questions in a “survey”, it could be a “fake door test“, “interview”, “prototype“, “A/B test“ or any other user research technic.</p>\n      </BlockLeft>\n\n      <BlockRight>\n        <img src={ImgFluid} alt=\"Screenshot of fluid hypotheses\"/>\n        <h3>Fluid</h3>\n        <p>Brainstorm meetings or any kind of creative meetings bring lots of ideas to the project, we need a quick way to write and discuss them, we also need to define how we can validate them or prove them wrong. Since the time for a meeting is fixed, I usually take shortcuts to avoid stopping the creative momentum of the team. The person who is writing should be the one who will look at this in the end, otherwise we risk not understanding what is written.</p>\n        <p>I focus mainly on getting the user goal right, with overall agreement with what was written.</p>\n        <p>Then, I try to get the max info I can about the goal and how to validate it.<br/>\n          If there are different options we write a few together. If the testing is not straightforward, I push to define how can we prove that the idea works.</p>\n        <p>I usually spend time after the meeting, cleaning up and making things clearer. We don’t want to look at the flow tomorrow and not getting what it means.<br/>\n          It wouldn’t be a first to me :D</p>\n      </BlockRight>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default Hypotheses;","import React, {useState, useEffect} from 'react';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, \n  BlockLeft, \n  BlockRight, \n  BlockFull\n} from '../App/styles';\n\nimport ImgUserFlow from './images/User Flow.png';\nimport ImgUserStories from './images/User Stories.png';\n\ninterface IBecomingACupProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"How can someone become a cup?\",\n  id : \"becoming-a-cup\"\n}\n\nconst BecomingACup : React.FC<IBecomingACupProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockFull desktopOrder=\"0\">\n        <h2>{data.title}</h2>\n      </BlockFull>\n      <BlockLeft desktopOrder=\"1\">\n        <p>Let’s get our natural bias out of the way, you cannot be a 60-year-old woman if that is your user base. Also, even if you happen to be one, your user base is made up of thousands of 60-year-old women, all with different things they like, different interests, different memories and different lives.</p>\n        <p>So, now that we know that we can't become our user base, what can we do to become a cup? User Research!</p>\n        <p><b>Interviews,</b> talk with different users, ask them questions about life, choices, goals. What they like or hate, how do they react to different issues. How do they use your product or your competitor’s product. What do they expect from it, their problems with it and what is missing?</p>\n      </BlockLeft>\n\n      <BlockRight desktopOrder=\"2\">\n        <p><b>Surveys,</b>  with them you get huge amounts of data to play with. Ask them what you want (respectfully) and also, ask them questions that will drive the results that you can later segment to have different perspectives.<br/>\n          Don’t take it as the absolute truth, as a survey represents the perception that the users have of themselves, it may also be that they can lie or be in a hurry.</p>\n        <p><b>Analytics data,</b> the real numbers recorded straight from our product. We can get usage time, type of user and device, number of sessions and session duration, per segment, quite easily. But you need to have a good understanding of data science or have a scientist in your team to have valuable and unexpected insights.</p>\n      </BlockRight>\n\n      <BlockFull desktopOrder=\"3\">\n        <img src={ImgUserFlow} alt=\"User flow\"/>\n      </BlockFull>\n\n      <BlockFull desktopOrder=\"4\">\n        <h3>User flow</h3>\n      </BlockFull>\n\n      <BlockLeft desktopOrder=\"5\">\n        <p>Represents the several paths the users take to reach their goals. We don’t need to add too many details at this moment, we need to focus on the essential and keep it simple.</p>\n        <p>To create a user flow we keep questioning, how do they get to that point, why are they there, what are they seeing and where do they go from there. The nodes are the answers to those questions.</p>\n        <p><b>Entry nodes,</b> what are the ways from which the user gets to our feature or product. In this case “google search“, could be “homepage”, “banner“, “email“.</p>\n        <p><b>Action nodes,</b> what is the action that takes the user to the next node. In this case “Land on the page“, could be “click button”, “scroll down”, “closes popup“.</p>\n      </BlockLeft>\n\n      <BlockRight desktopOrder=\"6\">\n        <p><b>State nodes,</b> what are the users looking for, what is their state of mind? In this case “I’m decorating a room“ or “I’m looking for a specific product“.</p>\n        <p><b>Info nodes</b> these are notes that don’t belong in the flow but give us context to understand the same level nodes. Usually, I use an info icon to differentiate from the other nodes. In this case “Room styling tips“.</p>\n        <p><b>Content nodes</b> are indications to the type of content that the user needs to achieve their goal. In this case “Buying assistant“, “Find your style“, “Search“, etc…</p>\n      </BlockRight>\n\n      <BlockRight desktopOrder=\"8\">\n        <img src={ImgUserStories} alt=\"User stories\"/>\n      </BlockRight>\n\n      <BlockLeft desktopOrder=\"7\">\n        <h3>User stories</h3>\n        <p>There is reasoning to our user goals and we need to give some context as to why the user has them. We are trying to individualise the users and turn them to humans with a life.</p>\n        <p><b>User type,</b> what’s their age, gender, name, picture. In this case “Female 30 year old“, could be “Jessie, a 30-year-old woman“.</p>\n        <p><b>History,</b> what is their life story that makes sense to us. In this case “just moved into a new house“ or “interior designer“.</p>\n        <p><b>Goal,</b> why are they here, what are they looking for? In this case “wants to know how the products are made and…“ or the final bit of every node here.</p>\n      </BlockLeft>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default BecomingACup;","import React, {useState, useEffect} from 'react';\n\nimport { useAppContext } from '../App/App';\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, \n  BlockLeft, \n  BlockRight, \n  BlockFull\n} from '../App/styles';\n\nimport ImgFlowListing from './images/Flow Listing.png';\nimport ImgFlowMap from './images/Flow Map.png';\nimport ImgShowroom from './images/made-design-showroom.jpg';\n\ninterface IFlowMapProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Flow map\",\n  id : \"flow-map\"\n}\n\nconst FlowMap : React.FC<IFlowMapProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockLeft>\n        <h2>{data.title}</h2>\n      </BlockLeft>\n\n      <BlockRight>\n        <p><b>It is a map of the product or the feature we are creating.</b> Not every feature needs a map, but it can help to avoid some mistakes and simplify the next step of creation (Wireframes/UI).</p>\n        <p>With the user flow, we have some tram lines for the several paths that the user can take, but it isn’t detailed enough on the content and interaction specifics. By copying the user flow and expanding in detail each node, we end up with a blueprint of our product/feature.</p>\n      </BlockRight>\n\n      <BlockLeft>\n        <h3>Content</h3>\n        <p>What the user needs to read or to do, to complete a goal. A page or a screen is made of content, page title, pictures, text, buttons and navigation. We aim to add all the possible nodes required by the user, even if that means we have too much content for one context. No need to worry because, in every step of the design process (wireframes, UI, prototype), we aim to simplify and cut every unnecessary item and since we are following the rules of the flow, we put in order all content from top to bottom by the level of importance, which will help us to decide what is important in the next design step.</p>\n      </BlockLeft>\n\n      <BlockRight>\n        <h3>Context</h3>\n        <p>What is the current goal of the user at that stage? A page or screen is a context. When we use a popup, for example, we don’t want the user to lose the context they are currently in, the page underneath the popup.</p>\n        <p>When the user arrives at a product page, they expect to get all the information on the product. But too much information is not helpful, it gets confusing to a user, so we divide the context by using tabs or some sort of navigation, that will allow simplifying the amount of content we show to the user.</p>\n      </BlockRight>\n\n      <BlockLeft>\n        <img src={ImgFlowMap} alt=\"Screenshot of a flow map\"/>\n        <h3>The bones</h3>\n        <p><b>Like a sculptor working on a new piece,</b> the size of the sculpture is dependent on the size of the original rock and by trimming down the excessive parts of the rock, the sculptor starts to define the shape and volume of the art piece, leaving the details to the end, which will turn a rock to art. The rock is our flow map, the trimming is our wireframes and the detailing is the UI.</p>\n        <p>Our goal at this point is to create a big enough rock for us to trim it down, so we aim to get all the info the user needs: pictures, videos, texts, titles, buttons, banners, etc...</p>\n      </BlockLeft>\n\n      <BlockRight>\n        <img src={ImgShowroom} alt=\"A made.com person using the large screen app at the soho showroom\"/>\n        <h3>The skin</h3>\n        <p>The visual and interaction processes will become quicker and smarter. By abstracting content from visual, we have a period where we think about the the problem and after, we have a period to evaluate what works well together and what makes sense visually. We always cut things down at each stage of designing and the last step is always the absolute truth. As soon as we have wireframes, we don’t need to update the map with changes, because the wireframes are the truth, we only use the map to help us make decisions. Always move forward!</p>\n      </BlockRight>\n\n      <BlockFull>\n        <img src={ImgFlowListing} alt=\"Flow of a listing page\"/>\n        <h3>Type of nodes</h3>\n      </BlockFull>\n\n      <BlockLeft>\n        <p>The goal of a node is to quickly deliver a message with a mere glance.<br/>\n          When it makes sense, I use icons to easily identify specific items like actions or information. Also, I use bold on main nodes or components and I write the type in capitals before important nodes like SCREEN, PAGE, ACTION.</p>\n        <p>This is were things get messy, it gets huge and redundant quickly.</p>\n      </BlockLeft>\n\n      <BlockRight>\n        <p>I tend to create at the first level, the main screens/pages and components that are used in multiple places like a menu.</p>\n        <p><b>“…” node,</b> is a way to declutter and simplify. It means that the flow continues but it was already defined in a different place.</p>\n      </BlockRight>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default FlowMap;","import React, {useState, useEffect} from 'react';\n\nimport { IChapterData } from '../../interfaces/Chapter';\nimport {\n  Page, BlockLeft, BlockFull, BlockRight\n} from '../App/styles';\n\nimport { useAppContext } from '../App/App';\n\nimport ImgDevFlow from './images/Dev Flow.png'\nimport ImgDevFlowHorz from './images/Dev Flow Horz.png'\n\ninterface IPrototypeProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Prototype\",\n  id : \"prototype\"\n}\n\nconst Prototype : React.FC<IPrototypeProps> = ({ children }) => {\n\n  const {\n    appWidth, addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n\n      <BlockFull>\n        {(appWidth && appWidth < 768 ) ? (\n          <img src={ImgDevFlow} alt=\"Illustration of the design cycle\" />\n        ) : (\n          <img src={ImgDevFlowHorz} alt=\"Illustration of the design cycle\" />\n        )}\n      </BlockFull>\n\n      <BlockLeft>\n        <h2>{data.title}</h2>\n        <p>The final result of the next design process is a prototype that we can show to the users and get feedback. Wireframes and UI are part of the process of creating a proxy for the user to interact and show their problems and positive points of what we are building.</p>\n        <p>My design process is very fluid and I’m always between these stages: flows, prototype and user testing. In the beginning, there is a bigger investment in building the main prototype, but if we built it with iterations in mind, we can do weekly user testing sessions and implement the user feedback between them. Also, we can try any new ideas that come out of user testing.</p>\n        <p>I follow the <b><a href=\"https://www.nngroup.com/articles/why-you-only-need-to-test-with-5-users/\">guidelines from Nielsen Norman Group</a></b> that say, that by testing 5 users you find 80% of the problems. I believe that getting the prototype close to reality gets you the most viable results in user testing. I also believe that we should get feedback from the user often, so I try to implement the UI changes or any other aspect in the prototype to be user-tested.</p>\n        <p>I might create several prototypes to get feedback quickly. For instance, when I get the wireframes ready, I can create a screen-by-screen prototype with a single flow. From there, I build a proper prototype with actual data. I used to use framer to do this, but lately, I’m working with react as I get more freedom to do what I want and I’m getting faster at it. Any tool is good, it is the content that is important :)</p>\n      </BlockLeft>\n\n      <BlockRight>\n        {(appWidth && appWidth < 1060 ) ? (\n          <h3>Live</h3>\n        ) : (\n          <h2>Live</h2>\n        )}\n        <p>I love real data, I honestly do... Big numbers and big impact.</p>\n        <p>A/B test, trying different ways to show the content, trying different flows, following the numbers, segmenting users. In my opinion, having different versions and letting an AI system decide which version the user sees, will be the best way to optimise the system, designers will work on optimising each version and define the flow for each one of the user types.</p>\n        <p>Changing and optimising, brings us back to the beginning of the process, but with most of the assets already created and our knowledge of the problem, it will be very fast to iterate, create and test new versions.</p>\n      </BlockRight>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default Prototype;","import React, {useState, useEffect} from 'react';\n\nimport { IChapterData } from '../../interfaces/Chapter';\nimport { useAppContext } from '../App/App';\nimport {\n  Page, BlockLeft, BlockRight\n} from '../App/styles';\n\ninterface IThanksProps {\n  children ?: React.ReactNode\n}\n\nexport const data : IChapterData = {\n  title : \"Thank you for reading\",\n  id : \"thanks\"\n}\n\nconst Thanks : React.FC<IThanksProps> = ({ children }) => {\n\n  const {\n    addToTableOfContents\n  } = useAppContext();\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    if (!mounted && addToTableOfContents) {\n      addToTableOfContents(data);\n      setMounted(true);\n    }\n  }, [mounted, addToTableOfContents, setMounted]);\n\n  return (\n    <Page id={data.id}>\n      <BlockLeft>\n        <h2>{data.title}</h2>\n      </BlockLeft>\n\n      <BlockRight>\n        <p>Thanks<b> <a href=\"https://www.made.com/\">made.com</a></b> for letting me use real project flows.</p>\n        <p>Hi, I’m JD, a Lead Product Designer at Made Labs, and I have been working with product for almost 20 years. I applied my method in very distinct areas like agency, tv, airlines, social gaming, AI and ecommerce. The method is ever-evolving, it is not rigid, it is still mutating, adapting, learning.</p>\n      </BlockRight>\n\n      {children}\n    </Page>\n  );\n}\n\nexport default Thanks;","import styled from 'styled-components';\n\nexport const ShareIconSize : number = 40;\n\n\nexport const MenuContainer = styled.menu`\n  margin : 0;\n  padding : 0;\n  position : fixed;\n  width : 100%;\n  height : 100vh;\n  background-color : #FFFFFF;\n`;\n\n\nexport const MenuOptions = styled.div`\n  margin : 0;\n  padding : 0;\n  position : fixed;\n  width : 100%;\n  height : 100vh;\n  background-color : #FFFFFF;\n`;\n\n\nexport const AnchorContainer = styled.div`\n  display : flex;\n  flex-direction : column;\n  justify-content : space-between;\n\n  height : 80%;\n\n  margin : 0;\n  padding : 0;\n\n  margin-left : 10%;\n  margin-right : 10%;\n\n  a {\n    font-family : 'Roboto', serif;\n    font-weight : 300;\n    letter-spacing : 0.05em;\n    line-height : 1.5em;\n    text-decoration : none;\n    font-size : 1.2em;\n  }\n\n  @media (min-width: 768px) {\n    \n  }\n`;","import styled from 'styled-components';\n\nexport const ShareIconSize : number = 40;\n\nexport const ShareContainer = styled.div`\n  display : flex;\n  flex-direction : row;\n\n  margin : 0;\n  padding : 0;\n\n  margin-left : calc(10% - 8px);\n\n  * {\n    padding : 8px;\n  }\n\n  @media (min-width: 768px) {\n    \n  }\n`;","import React, {useState, useEffect} from 'react';\n\nimport {\n  FacebookIcon,\n  FacebookShareButton,\n  EmailShareButton,\n  EmailIcon,\n  LinkedinShareButton,\n  LinkedinIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n  TwitterShareButton,\n  TwitterIcon,\n} from \"react-share\";\n\nimport {\n  ShareContainer,\n  ShareIconSize\n} from './styles';\n\nimport { \n  useAppContext,\n  appUrl, appTitle, appQuote\n} from '../App/App';\n\n\ninterface IShareProps {\n  children ?: React.ReactNode\n}\n\n\nconst Share : React.FC<IShareProps> = ({ children }) => {\n\n  return (\n    <ShareContainer>\n\n      <LinkedinShareButton \n        url={appUrl}\n        title={appTitle}\n        summary={appQuote}\n      >\n        <LinkedinIcon size={ShareIconSize} round />\n      </LinkedinShareButton>\n\n      <FacebookShareButton\n        url={appUrl}\n        quote={appQuote}\n      >\n        <FacebookIcon size={ShareIconSize} round />\n      </FacebookShareButton>\n\n      <TwitterShareButton\n        url={appUrl}\n        title={appQuote}\n      >\n        <TwitterIcon size={ShareIconSize} round />\n      </TwitterShareButton>\n\n      <WhatsappShareButton\n        url={appUrl}\n        title={appQuote}\n        separator=\":: \"\n      >\n        <WhatsappIcon size={ShareIconSize} round />\n      </WhatsappShareButton>\n\n      <EmailShareButton\n        url={appUrl}\n        subject={appTitle}\n        body={appQuote}\n        separator={`\n\n`}\n      >\n        <EmailIcon size={ShareIconSize} round />\n      </EmailShareButton>\n\n    </ShareContainer>\n  );\n}\n\nexport default Share;","import React, {useState, useEffect} from 'react';\n\nimport { \n  MenuOptions, AnchorContainer\n} from './styles';\n\nimport { useAppContext } from '../App/App';\nimport Share from '../Share/Share';\n\nimport { IChapterData } from '../../interfaces/Chapter';\n\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\n\ninterface IMenuProps {\n  children ?: React.ReactNode\n}\n\nconst Menu : React.FC<IMenuProps> = ({ children }) => {\n\n  const {\n    appWidth, tableOfContentsItems\n  } = useAppContext();\n\n  return (\n    <MenuOptions>\n      <Share />\n\n      <AnchorContainer>\n        {tableOfContentsItems && tableOfContentsItems.map((dataVal : IChapterData) => (\n          <AnchorLink key={dataVal.id} href={`#${dataVal.id}`}>{dataVal.menuTitle || dataVal.title}</AnchorLink>\n        ))}\n      </AnchorContainer>\n    </MenuOptions>\n  );\n}\n\nexport default Menu;","import { AppColors } from './styles';\n\nexport const GlobalStyleCss : string = `\n  html {\n    text-rendering: optimizeLegibility;\n  }\n\n  body {\n    color: ${AppColors.text};\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: \"Raleway\" ,sans-serif;\n    font-weight : 400;\n  }\n\n  p, li {\n    line-height : 1.8em;\n    letter-spacing : 0.05em; \n    margin : 0;\n    font-weight : 400;\n    font-size : 0.9em;\n    max-width : 700px;\n\n    b {\n      font-weight : 700;\n    }\n\n    @media (min-width: 768px) {\n      font-size : 1em;\n    }\n  }\n\n  ul {\n    margin : 0;\n  }\n  \n  h1,h2,h3,h4,h5,h6 {\n    font-family : 'Roboto', serif;\n    font-weight : 300;\n    letter-spacing : 0.05em;\n    line-height : 1.5em;\n    margin : 0;\n    padding-left : -4px;\n  }\n\n\n  h1 {\n    font-size : 2.4em;\n    line-height : 1em;\n    letter-spacing : 0.15em;\n    text-transform : uppercase;\n    font-weight : 100;\n  }\n\n\n  h2 {\n    color: ${AppColors.brand2};\n    font-size : 2.3em;\n\n    @media (min-width: 1060px) {\n      font-size : 2.4em;\n    }\n  }\n\n\n  h3 {\n    color: ${AppColors.brand3};\n    font-size : 1.9em;\n\n    @media (min-width: 1060px) {\n      font-size : 2em;\n    }\n  }\n`;","import React, { \n  createContext, \n  useEffect,\n  useContext, \n  useState, \n  useCallback,\n  useRef \n} from 'react';\n\nimport { createGlobalStyle } from 'styled-components';\n\nimport { IChapterData } from '../../interfaces/Chapter';\n\nimport BeLikeWater from '../BeLikeWater/BeLikeWater';\nimport EmptyYourMind from '../EmptyYourMind/EmptyYourMind';\nimport EnterTheFlows from '../EnterTheFlows/EnterTheFlows';\nimport ChooseYourTool from '../ChooseYourTool/ChooseYourTool';\nimport ProblemDeconstruction from '../ProblemDeconstruction/ProblemDeconstruction';\nimport Hypotheses from '../Hypotheses/Hypotheses';\nimport BecomingACup from '../BecomingACup/BecomingACup';\nimport FlowMap from '../FlowMap/FlowMap';\nimport Prototype from '../Prototype/Prototype';\nimport Thanks from '../Thanks/Thanks';\nimport Menu from '../Menu/Menu';\n\nimport {\n  AppContainer,\n  AppColors,\n  AppTitles,\n  AppLogo,\n  AppHeader\n} from './styles';\n\nimport { GlobalStyleCss } from './globalStyle';\n\nimport SvgLogo1 from './images/Sq1.svg';\nimport SvgLogo2 from './images/Sq2.svg';\nimport SvgLogo3 from './images/Sq3.svg';\n\n\nexport interface IAppContext {\n  appWidth ?: number,\n  appHeight ?: number,\n  tableOfContentsItems ?: IChapterData[],\n  addToTableOfContents ?: (dataVal: IChapterData) => void\n};\n\nconst AppContext = createContext<IAppContext>({});\n\nexport const useAppContext = () => {\n  return useContext(AppContext);\n}\n\n\nexport const appUrl : string = \"https://liquidshapedesign.com/\";\nexport const appTitle : string = \"Liquid Shape Design\";\nexport const appQuote : string = \"Creating a layer of abstraction in the design process to think the problem through\";\n\n\nconst GlobalStyle = createGlobalStyle`\n  ${GlobalStyleCss}\n`;\n\n\nexport const App : React.FC<{}> = () => {\n\n  const [mounted, setMounted] = useState(false);\n\n  const containerDom = useRef<HTMLDivElement>(null);\n\n  const [appWidth, setAppWidth] = useState<number>(0);\n  const [appHeight, setAppHeight] = useState<number>(0);\n  const [tableOfContentsItems, setTableOfContentsItems] = useState<IChapterData[]>([]);\n\n  const updateAppSize = useCallback(() => {\n    if (containerDom && containerDom.current) {\n      setAppWidth(containerDom.current.offsetWidth);\n      setAppHeight(containerDom.current.offsetHeight);\n    }\n  }, [setAppWidth, setAppHeight]);\n\n\n  const addToTableOfContents = useCallback((dataVal : IChapterData) => {\n    const tableOfContentsItemsVal = tableOfContentsItems;\n    tableOfContentsItemsVal.push(dataVal);\n    setTableOfContentsItems(tableOfContentsItemsVal);\n  }, [tableOfContentsItems, setTableOfContentsItems]);\n\n\n  useEffect(() => {\n    if (!mounted) {\n      updateAppSize();\n      setMounted(true);\n    }\n  }, [mounted, updateAppSize]);\n\n\n  useEffect(() => {\n    if (containerDom && containerDom.current) {\n      const domElement = containerDom.current;\n\n      domElement.addEventListener(\"resize\", updateAppSize);\n      window.addEventListener(\"resize\", updateAppSize);\n\n      return () => {\n        if (domElement) {\n          domElement.removeEventListener(\"resize\", updateAppSize);        \n          window.removeEventListener(\"resize\", updateAppSize);\n        }\n      };\n    }\n  });\n\n  return (\n\n    <AppContext.Provider\n      value={{\n        appWidth, appHeight,\n        tableOfContentsItems, addToTableOfContents\n      }}\n    > \n\n      <Menu />\n\n      <AppContainer \n        ref={containerDom}\n      >\n\n        {(appWidth && appWidth < 768 ) ? (\n          <AppHeader>\n            <AppLogo>\n              <div>\n                <img src={SvgLogo1} alt=\"Logo Liquid\" />\n                <h1 style={{ color : AppColors.brand1 }}>Liquid</h1>\n              </div>\n              <div>\n                <img src={SvgLogo2} alt=\"Logo Shape\" />\n                <h1 style={{ color : AppColors.brand2 }}>Shape</h1>\n              </div>\n              <div>\n                <img src={SvgLogo3} alt=\"Logo Design\" />\n                <h1 style={{ color : AppColors.brand3 }}>Design</h1>\n              </div>\n            </AppLogo>\n          </AppHeader>\n        ) : (\n          <AppHeader>\n            <AppLogo>\n              <img src={SvgLogo1} alt=\"Logo Liquid\" />\n              <img src={SvgLogo2} alt=\"Logo Shape\" />\n              <img src={SvgLogo3} alt=\"Logo Design\" />\n            </AppLogo>\n            <AppTitles>\n              <h1 style={{ color : AppColors.brand1 }}>Liquid</h1>\n              <h1 style={{ color : AppColors.brand2 }}>Shape</h1>\n              <h1 style={{ color : AppColors.brand3 }}>Design</h1>\n            </AppTitles>\n          </AppHeader>\n        )}\n\n        <BeLikeWater />\n\n        <EmptyYourMind />\n\n        <EnterTheFlows />\n\n        <ChooseYourTool />\n\n        <ProblemDeconstruction />\n\n        <Hypotheses />\n\n        <BecomingACup />\n\n        <FlowMap />\n\n        <Prototype />\n\n        <Thanks />\n\n      </AppContainer>\n\n      <GlobalStyle/>\n\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}